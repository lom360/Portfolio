<h5>Collect Maximum Coins</h5>
<pre><code class="language-c++">
    /*
    * INSTRUCTION:
    *     This is a C++ staring code for hw6_1.
    *     When you finish the development, download this file.
    *     Note that the current filename is "main.cpp".
    *     But rename it to "main_hw6_1.cpp".
    *     After that, upload the renamed file on Canvas.
    */
   
   // Finish the head comment with Abstract, ID, Name, and Date.
   /*
    * Title: main_hw6_1.cpp
    * Abstract: Collect the maximum number of coins on an n x m board which was
    * covered in the class.
    * ID: 0111
    * Name: Sarom Thin
    * Date: 04/19/2022
    */
   
   #include <iostream>
   #include <stack>
   #include <vector>
   using namespace std;
   
   void test(vector<vector<int>> arr);
   void createWeightedPath(vector<vector<int>> &a, int n, int m);
   void printMaxCollected(int maxCoins);
   void printBestPath(vector<vector<int>> a, int n, int m);
   
   int main()
   {
     // Your code should be here.
     int n, m;
     cin >> n >> m;
     vector<vector<int>> a(n, vector<int>(m));
   
     createWeightedPath(a, n, m);
     printBestPath(a, n, m);
   
     return 0;
   }
   
   void test(vector<vector<int>> arr) {
     for(int i = 0; i < arr.size(); i++) {
       for(int j = 0; j < arr[i].size(); j++) {
         cout << arr[i][j] << " ";
       } cout << endl;
     }
   }
   
   /*
    * Pass in a double vector by reference and two inputs that represents the dimensions
    * of the double vector. 
    */
   void createWeightedPath(vector<vector<int>> &a, int n, int m) {
     int i;
     int j;
   
     // Loop to populate baord with 1s and 0s base on input.
     for(i = 0; i < n; i++) {
       for(j = 0; j < m; j++) {
         int value;
         cin >> value;
         a[i][j] = value;
         }
     }
   
     // The following loop calculates the weight of the squares for the first row.
     i = 0; int sum = 0; // The sum variable keeps count of marbles. Only needs to
     for(j = 0; j < m; j++) { // be used for first row and column.
       if(a[i][j] == 1) { // If a marble in encountered,
         sum = sum + 1;  // Then increment sum
         a[i][j] = sum;  // and store in the square.
       }
       if(a[i][j] < sum) { // This case is to change 0 to the appropriate weight.
         a[i][j] = sum;  // Basically when 0 is encountered just replace with the current sum.
       }
     }
   
     // The following loop calculates the weight of the squares for the first column.
     // Does the exact same thing as the loop above, but of course adjusted to target
     // all values in the first column.
     j = 0; sum = 0;
     for(i = 0; i < n; i++) {
       if(a[i][j] == 1) {
         sum = sum + 1;
         a[i][j] = sum;
       }
       if(a[i][j] < sum) {
         a[i][j] = sum;
       }
     }
   
     // The follwing loop calculates the weight of the squares for the rest of the board.
     // Since the first row and column should have already been done by now from the 
     // two previous loop.
     for(i = 1; i < n; i++) {
       for(j = 1; j < m; j++) {
         if(a[i][j-1] > a[i-1][j]) // If the square of the left is greater than the square above,
           a[i][j] = a[i][j] + a[i][j-1]; // then add current value of square with above.
         else                      // Else if the square to the above is greater than or equal to the left.
           a[i][j] = a[i][j] + a[i-1][j]; // Then add current value of square with top.
       }
     }
   }
   
   // Pass the double vector that has been adjusted to show the weight of squares.
   // Also pass in two inputs representing dimensions of the board.
   // This function will also utilize a stack to assist in printing the values
   // in proper order.
   void printBestPath(vector<vector<int>> a, int n, int m) {
     printMaxCollected(a[n-1][m-1]);// Pass the value of bottom right corner and that will be max.
     stack<int> s;
   
     int i = n-1; // Since we are searching path backwards
     int j = m-1; // we will start i and j at the end.
     while(i > 0 && j > 0) { // Exit when either i || j == 0. Will handle later after loop is done.
       s.push(j+1); // Plus 1 since board's indexes should be 1 to n or m.
       s.push(i+1); // Push (j+1) and (i+1) in that order. So when checking top of stack it will be in order.
       if(a[i-1][j] > a[i][j-1]) // If top is greater than left,
         i--;                    // then move to the top by decrementing i.
       else                      // Else means left is greater than or equal to,
         j--;                    // then move to the left by decrementing j.
     }
   
     if(j == 0) { // If j = 0, then that means left edge of board has been reached,
       while(i >= 0) { // so can no longer go left. Will just travel top the
         s.push(j+1);  // rest of the way.
         s.push(i+1);
         i--;
       }
     }
     else if(i == 0) { // If i = 0 then that means top edge of board has been reached,
       while(j >= 0) { // so can no longer go top. Will just travel left the
         s.push(j+1);  // rest of the way.
         s.push(i+1);
         j--;
       }
     }
     cout << "Path:";
     cout << "(" << s.top() << ","; // Check top
     s.pop();                       // Pop top
     cout << s.top() << ")";        // Check top
     s.pop();                       // Pop top
     while(!s.empty()) { // Will repeat the sequence above to print the proper pathway.
       cout << "->(" << s.top() << ",";
       s.pop();
       cout << s.top() << ")";
       s.pop();
     }
     cout << endl;
   }
   
   void printMaxCollected(int maxCoins) {
     cout << "Max coins:" << maxCoins << endl;
   }
</code></pre>

<br>
<h5>Floyd Algorithm</h5>
<pre><code class="language-c++">
    /*
    * INSTRUCTION:
    *     This is a C++ staring code for hw6_2.
    *     When you finish the development, download this file.
    *     Note that the current filename is "main.cpp".
    *     But rename it to "main_hw6_2.cpp".
    *     After that, upload the renamed file on Canvas.
    */
   
   // Finish the head comment with Abstract, ID, Name, and Date.
   /*
    * Title: main_hw6_2.cpp
    * Abstract: Implements the Floyd algorithm to display all-pairs shortest paths.
    * ID: 0111
    * Name: Sarom Thin
    * Date: 04/19/2022
    */
   
   #include <iostream>
   #include <vector>
   using namespace std;
   
   
   void test(vector<vector<int>> matrix, int n);
   void PairsShortestPaths(vector<vector<int>> graph, int vertexCount);
   
   int main()
   {
     // Your code should be here.
     int vertexCount;
     cin >> vertexCount;
     vector<vector<int>> graph(vertexCount, vector<int>(vertexCount));
   
     for(int i = 0; i < vertexCount; i++) {
       for(int j = 0; j < vertexCount; j++) {
         int x; cin >> x;
         graph[i][j] = x;
       }
     }
   
     PairsShortestPaths(graph, vertexCount);
     // test(graph, vertexCount);
     return 0;
   }
   
   void test(vector<vector<int>> a, int n) {
     for(int i = 0; i < n; i++) {
         cout << a[i][0];
       for(int j = 1; j < n; j++) {
         cout << " " << a[i][j];
       } cout << endl;
     }
   }
   
   void PairsShortestPaths(vector<vector<int>> graph, int vertexCount) {
     int numVertices = vertexCount;
     vector<vector<int>> distMatrix(vertexCount, vector<int>(vertexCount));
     for(int i = 0; i < vertexCount; i++) {
       for(int j = 0; j < vertexCount; j++) {
         distMatrix[i][j] = graph[i][j];
       }
     }
   
     bool test1;
     bool test2;
     for (int k = 0; k < numVertices; k++) {
       for (int fromIndex = 0; fromIndex < numVertices; fromIndex++) {
         for (int toIndex = 0; toIndex < numVertices; toIndex++) {
           double currentLength = distMatrix[fromIndex][toIndex];
           double possibleLength = distMatrix[fromIndex][k] + distMatrix[k][toIndex];
           test1 = distMatrix[fromIndex][k] == -1 ? true:false; // Since we are using -1 to represent infinity.
           test2 = distMatrix[k][toIndex] == -1 ? true:false; // just continue to the next iteration if
           if(test1 || test2) continue;                       // either is equal to -1.
           if (possibleLength < currentLength || currentLength == -1) {// We want to replace -1 regardless.
             distMatrix[fromIndex][toIndex] = possibleLength;
           }
         } 
       }
     }
     test(distMatrix, vertexCount); // My test print can also print desired output.
   }
</code></pre>